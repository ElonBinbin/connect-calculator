// @generated by protoc-gen-es v1.10.1 with parameter "target=ts"
// @generated from file src/proto/calculator.proto (package calculator, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * 定义操作数的结构
 *
 * @generated from message calculator.Operands
 */
export class Operands extends Message<Operands> {
  /**
   * @generated from field: double a = 1;
   */
  a = 0;

  /**
   * @generated from field: double b = 2;
   */
  b = 0;

  constructor(data?: PartialMessage<Operands>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "calculator.Operands";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "a", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 2, name: "b", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Operands {
    return new Operands().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Operands {
    return new Operands().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Operands {
    return new Operands().fromJsonString(jsonString, options);
  }

  static equals(a: Operands | PlainMessage<Operands> | undefined, b: Operands | PlainMessage<Operands> | undefined): boolean {
    return proto3.util.equals(Operands, a, b);
  }
}

/**
 * 定义结果的结构
 *
 * @generated from message calculator.Result
 */
export class Result extends Message<Result> {
  /**
   * @generated from field: double value = 1;
   */
  value = 0;

  constructor(data?: PartialMessage<Result>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "calculator.Result";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Result {
    return new Result().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Result {
    return new Result().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Result {
    return new Result().fromJsonString(jsonString, options);
  }

  static equals(a: Result | PlainMessage<Result> | undefined, b: Result | PlainMessage<Result> | undefined): boolean {
    return proto3.util.equals(Result, a, b);
  }
}

